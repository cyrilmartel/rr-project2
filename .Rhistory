filter(cran,
| country == "US" | country == "IN")
filter(cran,country == "US" | country == "IN")
filter(cran, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2,ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2,country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
quit()
library(swirl)
swirl()
library(dplryr)
library(dplyr)
tbl_df(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs=0.99)
top_counts <- filter(pack_sum, count>679)
top_counts
head(top_counts, 20)
arrange(top_counts, desc(count))
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
top_unique
arrange(top_unique, desc(unique))
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
data <- df(ncol = 3)
df()
?df
?data.frame
data <- data.frame (row.names = c(UK,BELGIUM,RUSSIA))
data <- data.frame (row.names = c("UK","BELGIUM"","RUSSIA""))
data <- data.frame (row.names = c("UK","BELGIUM,"RUSSIA""))
data <- data.frame (row.names = c("UK","BELGIUM","RUSSIA"))
View(data)
cbind(data,c("Very High", "High", "Moderate"))
Intensity <- c("Very High", "High", "Moderate")
cbind(data,Intensity)
Latitude <- c(2,1,2)
Longitude <- c(1,2,3)
Population <- c(10,1,30)
data <- cbind(data,Latitude,Longitude,Population)
View(data)
Countries <- c("UK","BELGIUM","RUSSIA")
data <- data.frame (row.names = c("UK","BELGIUM","RUSSIA"))
Intensity <- c("Very High", "High", "Moderate")
Latitude <- c(2,1,2)
Longitude <- c(1,2,3)
Population <- c(10,1,30)
data <- cbind(data,Latitude,Longitude,Population)
View(data)
View(data)
Countries <- c("UK","BELGIUM","RUSSIA")
data <- data.frame (row.names = c("UK","BELGIUM","RUSSIA"))
Intensity <- c("Very High", "High", "Moderate")
Latitude <- c(2,1,2)
Longitude <- c(1,2,3)
Population <- c(10,1,30)
data <- cbind(data,Latitude,Longitude,Population,Intensity)
View(data)
plot(data$Longitude, data$Latitude)
data <- cbind(c(1:3),data)
View(data)
data <- data.frame ()
Countries <- c("UK","BELGIUM","RUSSIA")
Intensity <- c("Very High", "High", "Moderate")
Latitude <- c(2,1,2)
Longitude <- c(1,2,3)
Population <- c(10,1,30)
data <- cbind(data,Countries,Latitude,Longitude,Population,Intensity)
data <- data.frame ()
Countries <- c("UK","BELGIUM","RUSSIA")
Intensity <- c("Very High", "High", "Moderate")
Latitude <- c(2,1,2)
Longitude <- c(1,2,3)
Population <- c(10,1,30)
data <- cbind(data,Countries,Latitude,Longitude,Population,Intensity)
data <- data.frame (row.names = c(1:5))
Countries <- c("UK","BELGIUM","RUSSIA")
Intensity <- c("Very High", "High", "Moderate")
Latitude <- c(2,1,2)
Longitude <- c(1,2,3)
Population <- c(10,1,30)
data <- cbind(data,Countries,Latitude,Longitude,Population,Intensity)
data <- data.frame (row.names = c(1:3))
Countries <- c("UK","BELGIUM","RUSSIA")
Intensity <- c("Very High", "High", "Moderate")
Latitude <- c(2,1,2)
Longitude <- c(1,2,3)
Population <- c(10,1,30)
data <- cbind(data,Countries,Latitude,Longitude,Population,Intensity)
plot()
Plot(4,4)
plot(4,4)
?apply
data <- data.frame (row.names = c(1:3))
Countries <- c("UK","BELGIUM","RUSSIA")
Intensity <- c("Very High", "High", "Moderate")
Latitude <- c(2,1,2)
Longitude <- c(1,2,3)
Population <- c(10,1,30)
data <- cbind(data,Countries,Latitude,Longitude,Population,Intensity)
View(data)
plot(data[2,1])
plot(data[2,1], data[2,2])
plot(data[1,2], data[1,3])
plot(data[1,3], data[1,2])
?plot
points(data[2,3], data[2,2], pointsize = data[2,4])
points(data[2,3], data[2,2], cex = data[2,4])
points(data[2,3], data[2,2], cex = data[2,4])
points(data[2,3], data[2,2], cex = 10)
data <- data.frame (row.names = c(1:3))
Countries <- c("UK","BELGIUM","RUSSIA")
Intensity <- c("Very High", "High", "Moderate")
Latitude <- c(2,1,2)
Longitude <- c(1,2,3)
Population <- c(10,1,30)
data <- cbind(data,Countries,Latitude,Longitude,Population,Intensity)
plot(data[1,3], data[1,2])
points(data[2,3], data[2,2], cex = 10)
library (rJava)
?mapply
?tapply
?aggregate
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
library(dplyr)
library(ggplot2)
NEI_Baltimore <- (filter(NEI, fips == "24510"))
##coerces the type of source into a factor with 4 levels
NEI_Baltimore$type <- as.factor(NEI_Baltimore$type)
listdir()
lsdir()
list.files()
source('C:/Documents and Settings/CMA/Desktop/FNE/fne2.R')
WHO.rocks()
source('C:/Documents and Settings/CMA/Desktop/FNE/fne2.R')
WHO.rocks()
Sys.setenv(JAVA_HOME= "C:/Program Files/Java/jre6/")
library(xlsx)
install.packages("dplyr")
install.packages("xlsx")
Sys.setenv(JAVA_HOME="C:/Program Files/Java/jre6/")
library(xlsx)
Sys.setenv(JAVA_HOME="C:/Program Files/Java/jre6/")
library(xlsx)
library(xlsx)
Sys.getenv
Sys.getenv()
?Sys.getenv
v1 <- c("a", "b", "s<", "z<", "c")
v2 <- c(1:5)
df <- data.frame(v1,v2)
View(df)
df$v2 <- as.character(df$v2)
df$v1 <- as.character(df$v1)
library(dplyr)
v1 <- c("a", "b", "š", "ž", "c")
df <- data.frame(v1,v2)
df$v1 <- as.character(df$v1)
View(df)
df2 <- select(df, v1 == "s<")
df2 <- filter(df, v1 == "s<")
View(df2)
df2 <- filter(df, v1 == "š")
View(df2)
df <- data.frame(1:5, 1:10)
View(df)
df <- data.frame(1:5, letters(a:e))
?letters
df <- data.frame(1:5, LETTERS(a:e))
df <- data.frame(1:5, "LETTERS(a:e)")
View(df)
df <- data.frame(1:5, a:e)
df <- data.frame(1:5, letters(1:5))
letters[1]
letters[1:5]
df <- data.frame(1:5, letters[1:5])
View(df)
df <- data.frame(1:5, letters[1:5], 10:15)
df <- data.frame(1:5, letters[1:5], 10:14)
View(df)
for i in 1:10 {
IF (df[1,i] > 0) df[1.i] <- "foo"
}
for (i in 1:10) {
IF (df[1,i] > 0) df[1.i] <- "foo"
}
df <- data.frame(1:5, letters[1:5], 10:15)
for (i in 1:10) {
IF (df[1,i] > 0) {df[1.i] <- "foo"}
}
for (i in 1:10) {
if (df[1,i] > 0) {df[1.i] <- "foo"}
}
for (i in 1:10) {
if (df[1,i] > 0) {df[1,i] <- "foo"}
}
for (i in 1:5) {
+     if (df[i,1] > 0) {df[i,1] <- "foo"}
}
for (i in 1:5) {
df[i,1] <- x
if (x > 0) {x <- "foo"}
}
for (i in 1:5) {
x <- df[i,1]
if (x > 0) {x <- "foo"}
}
for (i in 1:5) {
x <- df[i,1]
if (x > 0) {df[i,1] <- "foo"}
}
View(df)
df <- data.frame(1:5, letters[1:5], 10:15)
df <- data.frame(1:5, letters[1:5], 10:14)
for (i in 1:5) {
x <- df[i,1]
if (x > 3) {df[i,1] <- "foo"}
}
library(swirl)
swirl()
swirl()
dice_sqr
ex2_fair <- dice_sqr * dice_fair
'ex2_fair <- sum(dice_fair * dice_sqr)'
ex2_fair <- sum(dice_fair * dice_sqr)
ex2_fair-3.5^2
sum(dice_high * dice_sqr)-edh^2
siwlr()
swirl()
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
setwd("O:/Courses/Coursera/Reproducible research/Reproducible research.git")
data <- read.csv ("repdata-data-StormData.csv", row.names = 37, stringsAsFactors = F)
##picks only interesting columns
data2 <- data[c(1,2,7,8,21:28)]
rm(data)
##turns EVTYPE into lowercase
data2$EVTYPE <- tolower(data2$EVTYPE)
##only rows with damages to health
health <- filter(data2, FATALITIES !=0 | INJURIES !=0)
##creates event column to avoid messing with EVTYPE
health <- mutate(health, event = EVTYPE)
##cleans the data by grouping them in categories (event column)
health$event[agrep("torna", health$event)] <- "tornado"
health$event[agrep("aval", health$event)] <- "avalanche"
health$event[agrep("fl", health$event)] <- "flood"
health$event[agrep("hurri", health$event)] <- "hurricane"
health$event[agrep("thun", health$event)] <- "thunderstorm"
health$event[agrep("tstm", health$event)] <- "thunderstorm"
health$event[agrep("rain", health$event)] <- "rain"
health$event[agrep("wind", health$event)] <- "wind"
health$event[agrep("snow", health$event)] <- "snow"
health$event[agrep("heat", health$event)] <- "heat"
health$event[agrep("hypothermia", health$event)] <- "hypothermia"
health$event[agrep("current", health$event)] <- "rip currents"
health$event[agrep("storm surge", health$event)] <- "storm surge"
health$event[agrep("ice road", health$event)] <- "ice on road"
health$event[agrep("ice on road", health$event)] <- "ice"
health$event[agrep("waterspout", health$event)] <- "tornado"
##creates a health2 dataset to avoid messing with health
health2 <- health
health2$event <- as.factor(health2$event)
levels(health2$event)
##create year colum
library(lubridate)
health2$BGN_DATE <- gsub("0:00:00","", health2$BGN_DATE)
health2$BGN_DATE <- mdy(health2$BGN_DATE)
health2 <- mutate (health2, year = format(health2$BGN_DATE, "%Y"))
##sums fatalities and injuries by type of event
health2 <- group_by(health2, year, event)
totalfatalities <- summarize(health2, sum(FATALITIES), sum(INJURIES))
colnames(totalfatalities)[c(3,4)] <- c("fatalities","injuries")
totalfatalities <- arrange(totalfatalities, year, event)
fatperyear <-  summarize(group_by(health2, year), sum(FATALITIES), sum(INJURIES))
colnames(fatperyear)[c(2,3)] <- c("fatperyear", "injperyear")
totalfatalities <- merge (totalfatalities, fatperyear)
totalfatalities <- mutate (totalfatalities, pctfat = 100*fatalities/fatperyear)
totalfatalities <- mutate (totalfatalities, pctinj = 100*injuries/injperyear)
library (ggplot2)
ggplot(totalfatalities, aes(year,fatalities)) + geom_bar(stat = "identity") + facet_wrap(~ event)
##looks only at data from 1995 (20 years back, rip currents start in 1994)
totalfatalities$year <- as.numeric(totalfatalities$year)
df95 <- totalfatalities[totalfatalities$year > 1994 & totalfatalities$pctfat > 5,]
ggplot(df95, aes(year,fatalities)) + geom_bar(stat = "identity") + facet_wrap(~ event)
ggplot(df95, aes(year,pctfat, fill = event)) + geom_bar(stat = "identity")
health <- filter(data2, FATALITIES !=0 | INJURIES !=0)
View(data2)
health <- filter(data2, INJURIES !=0)
health <- filter(data2, data2$FATALITIES !=0 | data2$INJURIES !=0)
library (dplyr)
health <- filter(data2, data2$FATALITIES !=0 | data2$INJURIES !=0)
##creates event column to avoid messing with EVTYPE
health <- mutate(health, event = EVTYPE)
##cleans the data by grouping them in categories (event column)
health$event[agrep("torna", health$event)] <- "tornado"
health$event[agrep("aval", health$event)] <- "avalanche"
health$event[agrep("fl", health$event)] <- "flood"
health$event[agrep("hurri", health$event)] <- "hurricane"
health$event[agrep("thun", health$event)] <- "thunderstorm"
health$event[agrep("tstm", health$event)] <- "thunderstorm"
health$event[agrep("rain", health$event)] <- "rain"
health$event[agrep("wind", health$event)] <- "wind"
health$event[agrep("snow", health$event)] <- "snow"
health$event[agrep("heat", health$event)] <- "heat"
health$event[agrep("hypothermia", health$event)] <- "hypothermia"
health$event[agrep("current", health$event)] <- "rip currents"
health$event[agrep("storm surge", health$event)] <- "storm surge"
health$event[agrep("ice road", health$event)] <- "ice on road"
health$event[agrep("ice on road", health$event)] <- "ice"
health$event[agrep("waterspout", health$event)] <- "tornado"
##creates a health2 dataset to avoid messing with health
health2 <- health
health2$event <- as.factor(health2$event)
levels(health2$event)
##create year colum
library(lubridate)
health2$BGN_DATE <- gsub("0:00:00","", health2$BGN_DATE)
health2$BGN_DATE <- mdy(health2$BGN_DATE)
health2 <- mutate (health2, year = format(health2$BGN_DATE, "%Y"))
##sums fatalities and injuries by type of event
health2 <- group_by(health2, year, event)
totalfatalities <- summarize(health2, sum(FATALITIES), sum(INJURIES))
colnames(totalfatalities)[c(3,4)] <- c("fatalities","injuries")
totalfatalities <- arrange(totalfatalities, year, event)
fatperyear <-  summarize(group_by(health2, year), sum(FATALITIES), sum(INJURIES))
colnames(fatperyear)[c(2,3)] <- c("fatperyear", "injperyear")
totalfatalities <- merge (totalfatalities, fatperyear)
totalfatalities <- mutate (totalfatalities, pctfat = 100*fatalities/fatperyear)
totalfatalities <- mutate (totalfatalities, pctinj = 100*injuries/injperyear)
library (ggplot2)
ggplot(totalfatalities, aes(year,fatalities)) + geom_bar(stat = "identity") + facet_wrap(~ event)
##looks only at data from 1995 (20 years back, rip currents start in 1994)
totalfatalities$year <- as.numeric(totalfatalities$year)
df95 <- totalfatalities[totalfatalities$year > 1994 & totalfatalities$pctfat > 5,]
ggplot(df95, aes(year,fatalities)) + geom_bar(stat = "identity") + facet_wrap(~ event)
ggplot(df95, aes(year,pctfat, fill = event)) + geom_bar(stat = "identity")
View(df95)
summaryhealth <- sumarize(group_by(df95,event), fatalities = sum(fatalities), injuries = sum(injuries))
summaryhealth <- summarize(group_by(df95,event), fatalities = sum(fatalities), injuries = sum(injuries))
View(summaryhealth)
summaryhealth <- arrange(summarize(group_by(df95,event), fatalities = sum(fatalities), injuries = sum(injuries)),fatalities)
View(summaryhealth)
summaryhealth <- arrange(summarize(group_by(df95,event), fatalities = sum(fatalities), injuries = sum(injuries)),desc(fatalities))
View(summaryhealth)
property <- filter(data2,PROPDMG !=0 | CROPDMG !=0)
property <- mutate(property, event = EVTYPE)
##cleans the data by grouping them in categories (event column)
property$event[agrep("torna", property$event)] <- "tornado"
property$event[agrep("aval", property$event)] <- "avalanche"
property$event[agrep("fl", property$event)] <- "flood"
property$event[agrep("hurri", property$event)] <- "hurricane"
property$event[agrep("thun", property$event)] <- "thunderstorm"
property$event[agrep("tstm", property$event)] <- "thunderstorm"
property$event[agrep("rain", property$event)] <- "rain"
property$event[agrep("wind", property$event)] <- "wind"
property$event[agrep("snow", property$event)] <- "snow"
property$event[agrep("heat", property$event)] <- "heat"
property$event[agrep("hypothermia", property$event)] <- "hypothermia"
property$event[agrep("current", property$event)] <- "rip currents"
property$event[agrep("storm surge", property$event)] <- "storm surge"
property$event[agrep("ice road", property$event)] <- "ice on road"
property$event[agrep("ice on road", property$event)] <- "ice"
property$event[agrep("waterspout", property$event)] <- "tornado"
##creates a health2 dataset to avoid messing with health
property2 <- property
property2$event <- as.factor(property2$event)
levels(property2$event)
View(health2)
View(property2)
property2[property2$PROPDMGEXP == K, property2$PROPDMGEXP) <- 1.000
property2[property2$PROPDMGEXP == K, property2$PROPDMGEXP] <- 1.000
property2[property2$PROPDMGEXP == "K", property2$PROPDMGEXP] <- 1.000
property2$PROPDMGEXP <- gsub("K", 1000, property2$PROPDMGEXP)
View(property2)
property2$PROPDMGEXP <- gsub("K", 1000, property2$PROPDMGEXP)
property2$PROPDMGEXP <- gsub("M", 1000000, property2$PROPDMGEXP)
property2$PROPDMGEXP <- gsub("B", 1000000000, property2$PROPDMGEXP)
property2$CROPDMGEXP <- gsub("K", 1000, property2$CROPDMGEXP)
property2$CROPDMGEXP <- gsub("M", 1000000, property2$CROPDMGEXP)
property2$CROPDMGEXP <- gsub("B", 1000000000, property2$CROPDMGEXP)
property2 <- mutate(property 2, PROPDMG = PROPDMG*PROPDMGEXP)
property2 <- mutate(property2, PROPDMG = PROPDMG*PROPDMGEXP)
View(property2)
property2$PROPDMGEXP <- as.numeric(property2$PROPDMGEXP)
property2$CROPDMGEXP <- as.numeric(property2$CROPDMGEXP)
property2 <- mutate(property2, PROPDMG = PROPDMG*PROPDMGEXP)
View(property2)
property2 <- mutate(property2, CROPDMG = PROPDMG*CROPDMGEXP)
View(property2)
property2$BGN_DATE <- gsub("0:00:00","", property2$BGN_DATE)
property$BGN_DATE <- mdy(property2$BGN_DATE)
property2 <- mutate (property2, year = format(property2$BGN_DATE, "%Y"))
library(lubridate)
property$BGN_DATE <- mdy(property2$BGN_DATE)
property2$BGN_DATE <- mdy(property2$BGN_DATE)
property2 <- mutate (property2, year = format(property2$BGN_DATE, "%Y"))
property2 <- group_by(property2, year, event)
totalprop <- summarize(property2, propdmg = sum(PROPDMG), cropdmg = sum(CROPDMG))
totalprop <- arrange(totalprop, year, event)
propperyear <-  summarize(group_by(property2, year), propperyear = sum(PROPDMG), cropperyear = sum(CROPDMG))
totalprop <- merge (totalprop, propperyear)
totalprop <- mutate (totalprop, pctfat = 100*propdmg/propperyear)
totalprop <- mutate (totalprop, pctinj = 100*cropdmg/cropperyear)
View(totalprop)
ggplot(totalprop, aes(year,propdmg)) + geom_bar(stat = "identity") + facet_wrap(~ event)
warnings()
df95prop <- totalprop[totalprop$year > 1994]
ggplot(df95prop, aes(year,propdmg)) + geom_bar(stat = "identity") + facet_wrap(~ event)
df95prop <- totalprop[totalprop$year > 1994,]
ggplot(df95prop, aes(year,propdmg)) + geom_bar(stat = "identity") + facet_wrap(~ event)
warnings()
ggplot(df95prop, aes(year,pctprop, fill = event)) + geom_bar(stat = "identity")
ggplot(df95prop, aes(year,pctfat, fill = event)) + geom_bar(stat = "identity")
summaryprop <- arrange(summarize(group_by(df95prop,event), propdmg = sum(propdmg), cropdmg = sum(cropdamages)),propdmg)
summaryprop <- arrange(summarize(group_by(df95prop,event), propdmg = sum(propdmg), cropdmg = sum(cropdmg)),propdmg)
View(summaryprop)
property2[is.na] <- 0
property2$event <- as.factor(property2$event)
levels(property2$event)
##replaces K,M and B by 1000, 1000000 and 1000000000
property2$PROPDMGEXP <- gsub("K", 1000, property2$PROPDMGEXP)
property2$PROPDMGEXP <- gsub("M", 1000000, property2$PROPDMGEXP)
property2$PROPDMGEXP <- gsub("B", 1000000000, property2$PROPDMGEXP)
property2$CROPDMGEXP <- gsub("K", 1000, property2$CROPDMGEXP)
property2$CROPDMGEXP <- gsub("M", 1000000, property2$CROPDMGEXP)
property2$CROPDMGEXP <- gsub("B", 1000000000, property2$CROPDMGEXP)
##mutates PROPDMG
property2$PROPDMGEXP <- as.numeric(property2$PROPDMGEXP)
property2$CROPDMGEXP <- as.numeric(property2$CROPDMGEXP)
property2 <- mutate(property2, PROPDMG = PROPDMG*PROPDMGEXP)
property2 <- mutate(property2, CROPDMG = PROPDMG*CROPDMGEXP)
library(lubridate)
property2$BGN_DATE <- gsub("0:00:00","", property2$BGN_DATE)
property2$BGN_DATE <- mdy(property2$BGN_DATE)
property2 <- mutate (property2, year = format(property2$BGN_DATE, "%Y"))
property2 <- group_by(property2, year, event)
totalprop <- summarize(property2, propdmg = sum(PROPDMG), cropdmg = sum(CROPDMG))
totalprop <- arrange(totalprop, year, event)
propperyear <-  summarize(group_by(property2, year), propperyear = sum(PROPDMG), cropperyear = sum(CROPDMG))
totalprop <- merge (totalprop, propperyear)
totalprop <- mutate (totalprop, pctfat = 100*propdmg/propperyear)
totalprop <- mutate (totalprop, pctinj = 100*cropdmg/cropperyear)
rm(data2)
library (ggplot2)
ggplot(totalprop, aes(year,propdmg)) + geom_bar(stat = "identity") + facet_wrap(~ event)
##looks only at data from 1995 (20 years back, rip currents start in 1994)
totalprop$year <- as.numeric(totalprop$year)
df95prop <- totalprop[totalprop$year > 1994,]
ggplot(df95prop, aes(year,propdmg)) + geom_bar(stat = "identity") + facet_wrap(~ event)
ggplot(df95prop, aes(year,pctfat, fill = event)) + geom_bar(stat = "identity")
##summarizes data from last 20 years by fatalities and injuries in absolute numbers
summaryprop <- arrange(summarize(group_by(df95prop,event), propdmg = sum(propdmg), cropdmg = sum(cropdmg)),propdmg)
property <- filter(data2,PROPDMG !=0 | CROPDMG !=0)
View(property)
property2 <- property
property2[is.na] <- 0
property2$PROPDMGEXP <- gsub("K", 1000, property2$PROPDMGEXP)
property2$PROPDMGEXP <- gsub("M", 1000000, property2$PROPDMGEXP)
property2$PROPDMGEXP <- gsub("B", 1000000000, property2$PROPDMGEXP)
property2$CROPDMGEXP <- gsub("K", 1000, property2$CROPDMGEXP)
property2$CROPDMGEXP <- gsub("M", 1000000, property2$CROPDMGEXP)
property2$CROPDMGEXP <- gsub("B", 1000000000, property2$CROPDMGEXP)
##mutates PROPDMG
property2$PROPDMGEXP <- as.numeric(property2$PROPDMGEXP)
property2$CROPDMGEXP <- as.numeric(property2$CROPDMGEXP)
property2 <- mutate(property2, PROPDMG = PROPDMG*PROPDMGEXP)
property2 <- mutate(property2, CROPDMG = PROPDMG*CROPDMGEXP)
property2[is.na] <- 0
property2[is.na(property2)] <- 0
View(property2)
property2$BGN_DATE <- gsub("0:00:00","", property2$BGN_DATE)
property2$BGN_DATE <- mdy(property2$BGN_DATE)
property2 <- mutate (property2, year = format(property2$BGN_DATE, "%Y"))
property2 <- group_by(property2, year, event)
totalprop <- summarize(property2, propdmg = sum(PROPDMG), cropdmg = sum(CROPDMG))
totalprop <- arrange(totalprop, year, event)
propperyear <-  summarize(group_by(property2, year), propperyear = sum(PROPDMG), cropperyear = sum(CROPDMG))
totalprop <- merge (totalprop, propperyear)
totalprop <- mutate (totalprop, pctfat = 100*propdmg/propperyear)
totalprop <- mutate (totalprop, pctinj = 100*cropdmg/cropperyear)
